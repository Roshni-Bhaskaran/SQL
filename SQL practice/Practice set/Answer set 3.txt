Tables:

Movie:
create table movie(mid int primary key,title char(30),year int(4),director char(20));

mysql> insert into movie values(101,'Gone with the Wind',1939,'Victor Fleming');
Query OK, 1 row affected (1.18 sec)

mysql> insert into movie values(102,'Star Wars',1977,'George Lucas');
Query OK, 1 row affected (0.16 sec)

mysql> insert into movie values(103,'The Sound of Music',1965,'Robert Wise');
Query OK, 1 row affected (0.20 sec)

mysql> insert into movie values(104,'E.T.',1982,'Steven Spielberg');
Query OK, 1 row affected (0.21 sec)

mysql> insert into movie values(105,'Titatnic',1997,'James Cameron');
Query OK, 1 row affected (0.15 sec)

mysql> insert into movie(mid,title,year) values(106,'Snow White',1937);
Query OK, 1 row affected (0.46 sec)

mysql> insert into movie values(107,'Avatar',2009,'James Cameron');
Query OK, 1 row affected (0.21 sec)

mysql> insert into movie values(108,'Raiders of the Lost Ark',1981,'Steven Spielberg');
Query OK, 1 row affected (0.52 sec)


Reviewer:

create table reviewer(rid int primary key,name char(25));

mysql> insert into reviewer values(202,'Daniel Lewis');
Query OK, 1 row affected (0.14 sec)

mysql> insert into reviewer values(203,'Brittany Harris');
Query OK, 1 row affected (0.15 sec)

mysql> insert into reviewer values(204,'Mike Anderson');
Query OK, 1 row affected (0.31 sec)

mysql> insert into reviewer values(205,'Chris Jackson');
Query OK, 1 row affected (0.22 sec)

mysql> insert into reviewer values(206,'Elizabeth Thomas');
Query OK, 1 row affected (0.11 sec)

mysql> insert into reviewer values(207,'James Cameron');
Query OK, 1 row affected (0.10 sec)

mysql> insert into reviewer values(208,'Ashley White');
Query OK, 1 row affected (0.93 sec)

mysql> insert into reviewer values(201,'Sarah Marinez');
Query OK, 1 row affected (0.12 sec)

Rating:

create table rating(rid int,mid int,stars int,ratingDate char(11),foreign key(mid) references movie(mid),foreign key(rid) references reviewer(rid));

mysql> insert into rating(rid,mid,stars) values(202,106,4);
Query OK, 1 row affected (0.31 sec)

mysql> insert into rating values(203,103,2,'2011-01-20');
Query OK, 1 row affected (0.23 sec)

mysql> insert into rating values(203,108,4,'2011-01-12');
Query OK, 1 row affected (0.13 sec)

mysql> insert into rating values(203,108,2,'2011-01-30');
Query OK, 1 row affected (0.15 sec)

mysql> insert into rating values(204,101,3,'2011-01-09');
Query OK, 1 row affected (0.36 sec)

mysql> insert into rating values(205,103,3,'2011-01-27');
Query OK, 1 row affected (0.21 sec)

mysql> insert into rating values(205,104,2,'2011-01-22');
Query OK, 1 row affected (0.20 sec)

mysql> insert into rating(rid,mid,stars) values(205,108,4);
Query OK, 1 row affected (0.23 sec)

mysql> insert into rating values(206,107,3,'2011-01-15');
Query OK, 1 row affected (0.26 sec)

mysql> insert into rating values(206,106,5,'2011-01-19');
Query OK, 1 row affected (0.14 sec)

mysql> insert into rating values(207,107,5,'2011-01-20');
Query OK, 1 row affected (0.16 sec)

mysql> insert into rating values(208,104,3,'2011-01-02');
Query OK, 1 row affected (0.11 sec)

mysql> insert into rating values(201,101,2,'2011-01-22');
Query OK, 1 row affected (1.17 sec)

mysql> insert into rating values(201,101,4,'2011-01-27');
Query OK, 1 row affected (0.59 sec)


Questions:

1.Find the titles of all movies directed by Steven Spielberg. (1 point possible)

2.Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)

3.Find the titles of all movies that have no ratings. (1 point possible)

4.Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. (1 point possible)

5.Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. (1 point possible)

6.For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. (1 point possible)

7.For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. (1 point possible)

8.For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

9.Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) (1 point possible)

10.Find the names of all reviewers who rated Gone with the Wind. (1 point possible)

11.For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)

12.Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) (1 point possible)

13.Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)

14.For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)

15.For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. (1 point possible)

16.List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (1 point possible)

17.Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) (1 point possible)

18.Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)

19.Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

20.Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

21.For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. (1 point possible)


Answer:

1.mysql> select title from movie where director ='Steven Spielberg';
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2 rows in set (0.43 sec)

2.mysql> select year,title from movie where mid in (select mid from rating where stars=4 or stars=5 group by mid) order by year;
+------+-------------------------+
| year | title                   |
+------+-------------------------+
| 1937 | Snow White              |
| 1939 | Gone with the Wind      |
| 1981 | Raiders of the Lost Ark |
| 2009 | Avatar                  |
+------+-------------------------+
4 rows in set (2.07 sec)

3.mysql> select title from movie where mid not in(select mid from rating);
+-----------+
| title     |
+-----------+
| Star Wars |
| Titatnic  |
+-----------+
2 rows in set (0.05 sec)

4.mysql> select name from reviewer e join rating r on e.rid= r.rid where r.ratingDate is null;
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
2 rows in set (0.00 sec)

5.mysql> select name as reviewer_name,title as movie_title,stars,ratingdate from reviewer r1,movie m,rating r2 where r1.rid=r2.rid and m.mid=r2.mid order by name,title,stars;
+------------------+-------------------------+-------+------------+
| reviewer_name    | movie_title             | stars | ratingdate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Sarah Marinez    | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Marinez    | Gone with the Wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
14 rows in set (0.04 sec)

6.

7.mysql> select title,max(stars) from movie m,rating r where m.mid=r.mid and stars in (select max(stars) from rating group by mid) group by r.mid order by title;
+-------------------------+------------+
| title                   | max(stars) |
+-------------------------+------------+
| Avatar                  |          5 |
| E.T.                    |          3 |
| Gone with the Wind      |          4 |
| Raiders of the Lost Ark |          4 |
| Snow White              |          5 |
| The Sound of Music      |          3 |
+-------------------------+------------+
6 rows in set (0.16 sec)

8.mysql> select title,max(stars)-min(stars) as ratingspeed from movie m join rating r on m.mid=r.mid group by r.mid order by ratingspeed desc,title;
+-------------------------+-------------+
| title                   | ratingspeed |
+-------------------------+-------------+
| Avatar                  |           2 |
| Gone with the Wind      |           2 |
| Raiders of the Lost Ark |           2 |
| E.T.                    |           1 |
| Snow White              |           1 |
| The Sound of Music      |           1 |
+-------------------------+-------------+
6 rows in set (0.06 sec)

9.mysql> select max-min from ((select avg(avg1) max from (select avg(stars) avg1 from rating r join movie m on r.mid=m.mid where year<1980 group by r.mid) as answer) as ans,(select avg(avg1) min from (select avg(stars) avg1 from rating r join movie m on r.mid=m.mid where year>1980 group by r.mid) as answer) as ans1);
+------------+
| max-min    |
+------------+
| 0.05556666 |
+------------+
1 row in set (0.01 sec)

10.mysql> select name from reviewer r1 join rating r2 on r1.rid=r2.rid where mid in (select mid from movie where title="Gone with the Wind") group by name;
+---------------+
| name          |
+---------------+
| Mike Anderson |
| Sarah Marinez |
+---------------+
2 rows in set (0.04 sec)

11.mysql> select name,title,stars from movie m join rating r1 on m.mid=r1.mid join reviewer r2 on r1.rid=r2.rid where m.director=r2.name;
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+
1 row in set (0.00 sec)

12.mysql> select name,title from movie,reviewer order by name,title;
+------------------+-------------------------+
| name             | title                   |
+------------------+-------------------------+
| Ashley White     | Avatar                  |
| Ashley White     | E.T.                    |
| Ashley White     | Gone with the Wind      |
| Ashley White     | Raiders of the Lost Ark |
| Ashley White     | Snow White              |
| Ashley White     | Star Wars               |
| Ashley White     | The Sound of Music      |
| Ashley White     | Titatnic                |
| Brittany Harris  | Avatar                  |
| Brittany Harris  | E.T.                    |
| Brittany Harris  | Gone with the Wind      |
| Brittany Harris  | Raiders of the Lost Ark |
| Brittany Harris  | Snow White              |
| Brittany Harris  | Star Wars               |
| Brittany Harris  | The Sound of Music      |
| Brittany Harris  | Titatnic                |
| Chris Jackson    | Avatar                  |
| Chris Jackson    | E.T.                    |
| Chris Jackson    | Gone with the Wind      |
| Chris Jackson    | Raiders of the Lost Ark |
| Chris Jackson    | Snow White              |
| Chris Jackson    | Star Wars               |
| Chris Jackson    | The Sound of Music      |
| Chris Jackson    | Titatnic                |
| Daniel Lewis     | Avatar                  |
| Daniel Lewis     | E.T.                    |
| Daniel Lewis     | Gone with the Wind      |
| Daniel Lewis     | Raiders of the Lost Ark |
| Daniel Lewis     | Snow White              |
| Daniel Lewis     | Star Wars               |
| Daniel Lewis     | The Sound of Music      |
| Daniel Lewis     | Titatnic                |
| Elizabeth Thomas | Avatar                  |
| Elizabeth Thomas | E.T.                    |
| Elizabeth Thomas | Gone with the Wind      |
| Elizabeth Thomas | Raiders of the Lost Ark |
| Elizabeth Thomas | Snow White              |
| Elizabeth Thomas | Star Wars               |
| Elizabeth Thomas | The Sound of Music      |
| Elizabeth Thomas | Titatnic                |
| James Cameron    | Avatar                  |
| James Cameron    | E.T.                    |
| James Cameron    | Gone with the Wind      |
| James Cameron    | Raiders of the Lost Ark |
| James Cameron    | Snow White              |
| James Cameron    | Star Wars               |
| James Cameron    | The Sound of Music      |
| James Cameron    | Titatnic                |
| Mike Anderson    | Avatar                  |
| Mike Anderson    | E.T.                    |
| Mike Anderson    | Gone with the Wind      |
| Mike Anderson    | Raiders of the Lost Ark |
| Mike Anderson    | Snow White              |
| Mike Anderson    | Star Wars               |
| Mike Anderson    | The Sound of Music      |
| Mike Anderson    | Titatnic                |
| Sarah Marinez    | Avatar                  |
| Sarah Marinez    | E.T.                    |
| Sarah Marinez    | Gone with the Wind      |
| Sarah Marinez    | Raiders of the Lost Ark |
| Sarah Marinez    | Snow White              |
| Sarah Marinez    | Star Wars               |
| Sarah Marinez    | The Sound of Music      |
| Sarah Marinez    | Titatnic                |
+------------------+-------------------------+
64 rows in set (0.07 sec)

13.mysql> select title from movie where mid not in (select mid from rating r1 join reviewer r2 on r1.rid=r2.rid where r2.name="Chris Jackson");
+--------------------+
| title              |
+--------------------+
| Gone with the Wind |
| Star Wars          |
| Titatnic           |
| Snow White         |
| Avatar             |
+--------------------+
5 rows in set (0.00 sec)

14.mysql> select distinct name,mid from reviewer r join rating r1 on r.rid=r1.rid order by mid,name;
+------------------+------+
| name             | mid  |
+------------------+------+
| Mike Anderson    |  101 |
| Sarah Marinez    |  101 |
| Brittany Harris  |  103 |
| Chris Jackson    |  103 |
| Ashley White     |  104 |
| Chris Jackson    |  104 |
| Daniel Lewis     |  106 |
| Elizabeth Thomas |  106 |
| Elizabeth Thomas |  107 |
| James Cameron    |  107 |
| Brittany Harris  |  108 |
| Chris Jackson    |  108 |
+------------------+------+
12 rows in set (0.03 sec)

15.mysql> select name,title,min(stars) from movie m join rating r1 on m.mid=r1.mid join reviewer r2 on r1.rid=r2.rid;
+--------------+------------+------------+
| name         | title      | min(stars) |
+--------------+------------+------------+
| Daniel Lewis | Snow White |          2 |
+--------------+------------+------------+
1 row in set (0.02 sec)

16.mysql> select title,avg(stars) as averageratings from movie m join rating r on m.mid=r.mid group by r.mid order by averageratings desc,title asc;
+-------------------------+----------------+
| title                   | averageratings |
+-------------------------+----------------+
| Snow White              |         4.5000 |
| Avatar                  |         4.0000 |
| Raiders of the Lost Ark |         3.3333 |
| Gone with the Wind      |         3.0000 |
| E.T.                    |         2.5000 |
| The Sound of Music      |         2.5000 |
+-------------------------+----------------+
6 rows in set (0.04 sec)

17.mysql> select name from reviewer r join rating r1 on r.rid=r1.rid group by r1.rid having count(*)>=3;
+-----------------+
| name            |
+-----------------+
| Brittany Harris |
| Chris Jackson   |
+-----------------+
2 rows in set (0.01 sec)

18.mysql> select m.title,m.director from movie m join movie m1 on m.director=m1.director group by m.mid having count(m.mid)>1 order by m.director,m.title;
+-------------------------+------------------+
| title                   | director         |
+-------------------------+------------------+
| Avatar                  | James Cameron    |
| Titatnic                | James Cameron    |
| E.T.                    | Steven Spielberg |
| Raiders of the Lost Ark | Steven Spielberg |
+-------------------------+------------------+
4 rows in set (0.05 sec)

19.mysql> select title,avg(stars) from movie m join rating r on m.mid=r.mid group by title having avg(stars) = (select max(rates) from (select avg(stars) as rates from rating group by mid) as a);
+------------+------------+
| title      | avg(stars) |
+------------+------------+
| Snow White |     4.5000 |
+------------+------------+
1 row in set (0.00 sec)

20.mysql>select title,avg(stars) from movie m join rating r on m.mid=r.mid group by title having avg(stars) = (select min(rates) from (select avg(stars) as rates from rating group by mid) as a);
+--------------------+------------+
| title              | avg(stars) |
+--------------------+------------+
| The Sound of Music |     2.5000 |
| E.T.               |     2.5000 |
+--------------------+------------+
2 rows in set (0.00 sec)

21.mysql> select m.director,m.title,max(r.stars) from movie m join rating r on m.mid=r.mid where m.director is not null group by m.director having max(stars) in (select max(stars) from rating r join movie m on m.mid=r.mid group by m.director);
+------------------+-------------------------+--------------+
| director         | title                   | max(r.stars) |
+------------------+-------------------------+--------------+
| Victor Fleming   | Gone with the Wind      |            4 |
| Robert Wise      | The Sound of Music      |            3 |
| Steven Spielberg | Raiders of the Lost Ark |            4 |
| James Cameron    | Avatar                  |            5 |
+------------------+-------------------------+--------------+
4 rows in set (0.00 sec)



